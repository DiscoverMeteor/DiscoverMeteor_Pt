---
title: A Sessão
slug: the-session
date: 0005/01/02
number: 5.5
sidebar: true
contents: Aprenda sobre a Sessão no Meteor.|Aprenda sobre a função autorun.|Aprenda sobre Hot Code Reload
paragraphs: 33
---

Meteor é um framework reativo. O que significa é que quando os dados são alterados, coisas em sua aplicação mudam sem você ter que explicitamente fazer alguma coisa.

Nós já vimos isso em ação e como nossos templates mudam quando os dados e as rotas mudam.

Vamos mergulhar fundo e saber como isso funciona nos próximos capítulos, mas por agora, gostaríamos de introduzir algumas propriedades básicas da reatividade que são extremamente úteis para maioria das aplicações.

### A Meteor "Session"

Agora no Microscope, o estado atual da aplicação do usuário está completamente contido na URL que ele está procurando (e o banco de dados).

Mas em vários casos, você vai precisar armazenar algum estado efêmero que só é relevante a versão atual do usuário da aplicação (por exemplo, se um elemento está exposto ou escondido). A *Session* é uma forma conveniente de se fazer isso.

A *Session* é um dado reativo global armazenado. Ele é global no sentido de um objeto *singleton* global: há uma sessão, e ela é acessível em todo lugar. Variáveis globais geralmente são vistas como coisas ruins, mas neste caso a sessão é usada como um veículo central de comunicação para diferentes partes da aplicação.

### Mudando a *Session*

Esta "sessão" está disponível como `Session`. Para configurar um valor de sessão, você pode chamar:

~~~js
❯ Session.set('pageTitle', 'A different title');
~~~
<%= caption "Browser console" %>

Você pode ler o dado de volta com `Session.get('mySessionProperty');`. Isso é uma fonte reativa de dados, que significa que se você colocá-la em um *helper*, você verá a saída do helper mudando reativamente quando a variável *Session* for alterada.

Para testar isso, adiocione o seguinte código no modelo do layout.

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">{{pageTitle}}</a>
  </div>
</header>
~~~
<%= caption "client/views/application/layout.html"%>

~~~js
Template.layout.helpers({
  pageTitle: function() { return Session.get('pageTitle'); }
});
~~~
<%= caption "client/views/application/layout.js"%>

A atualização automatica do Meteor (conhecida como "hot code reload" HCR) conserva as varáveis *Session*, então podemos agora ver "A different title" na barra de navegação. Se não, apenas digite o comando `Session.set()` novamente. 

Além disso se nós mudarmos o valor mais uma vez (novamente no console do browser), nós vamos ver outro título sendo mostrado:

~~~js
❯ Session.set('pageTitle', 'A brand new title');
~~~
<%= caption "Browser console" %>

*Session* está disponível globalmente, então estas mudanças podem ser feitas em qualquer lugar da aplicação. Isso nos dá muio poder, mas pode também ser uma armadilha se usado exageradamente.

<% note do %>

### Mudanças Idênticas

Se você modificar uma variável *Session* com `Session.set()` mas configurá-la com um valor idêntico, o Meteor é inteligente o suficiente para desviar a cadeia reativa, e evitar a chamada do método.

<% end %>

### Introduzindo o Autorun

Vimos um exmplo de fonte de dados reativa, e também vimos isso em ação dentro de um *template helper* (modelo auxiliar). Mas enquanto alguns contextos no Meteor (como os template helpers) são inerentemente reativos, a maioria do nosso código Meteor continua sendo o bom e velho JavaScript não-reativo.

Vamos supor que temos o seguinte trecho de código em algum lugar de nosso aplicativo:

~~~js
helloWorld = function() {
  alert(Session.get('message'));
}
~~~

Mesmo que estejamos chamando uma variável Session, o *contexto* em que a chamada é feita não é reativo, significando que nós não vamos ter um novo `alert` toda as vezes que mudarmos a variável.

Ai é onde o [Autorun](http://docs.meteor.com/#deps_autorun) entra. Como o nome implica, o código dentro de um bloco `autorun` vai rodar automaticamente e continuar rodando toda vez que a fonte de dados reativa usada mudar.

Tente digitar isso dentro do console do navegador:

~~~js
❯ Deps.autorun( function() { console.log('Value is: ' + Session.get('pageTitle')); } );
Value is: A brand new title
~~~
<%= caption "Console do navegador" %>

Como se poderia esperar, o bloco de código fornecido dentro de `autorun` roda uma vez, retornando esse dado para o console. Agora, vamos tentar mudar o título:

~~~js
❯ Session.set('pageTitle', 'Yet another value');
Value is: Yet another value
~~~
<%= caption "Console do navegador" %>

Mágica! Como o valor da sessão mudou, o `autorun` sabia que tinha que rodar este conteúdo todo novamente, re-imprimindo o novo valor no console.

Agora voltando ao exemplo anterior, se nós queremos disparar um novo alerta toda as vezes que nossa variável Session for alterada, tudo que temos que fazer é envolver nosso código em um bloco `autorun`:

~~~js
Deps.autorun(function() {
  alert(Session.get('message'));
});
~~~

Como acabamos de ver, *autoruns* pode ser muito útil para rastrear fontes de dados e reagir imperativamente com elas.

### Hot Code Reload

////

////

////

~~~js
❯ Session.set('pageTitle', 'A brand new title');
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

////

~~~js
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

////

////

////

~~~js
❯ Session.get('pageTitle');
null
~~~
<%= caption "Browser console" %>

////

////

1. ////
2. ////